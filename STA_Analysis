import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm


# ------------------------------------
# 1. Load & Process Web/App Visit Data
# ------------------------------------

web_data_file = 'web_data_cleaned_full.csv'
data = pd.read_csv(web_data_file, parse_dates=['datetime'])

# Set datetime as index
data.set_index('datetime', inplace=True)

# Create total visits column
data['visits_total'] = data['visits_app'] + data['visits_web']

# Display dataset overview
print("First few rows of data:\n", data.head())
print("\nMissing values in dataset:\n", data.isnull().sum())

# Drop missing values
data.dropna(inplace=True)

# ------------------------------------
# 2. Perform Seasonal-Trend Decomposition
# ------------------------------------

for col in ['visits_app', 'visits_web', 'visits_total']:
    print(f"\nPerforming Seasonal-Trend Decomposition for {col}...")
    decomposition = sm.tsa.seasonal_decompose(data[col], model='additive', period=1440)

    fig, axes = plt.subplots(4, 1, figsize=(11, 7))
    decomposition.observed.plot(ax=axes[0], title=f"Observed ({col})")
    decomposition.trend.plot(ax=axes[1], title=f"Trend ({col})")
    decomposition.seasonal.plot(ax=axes[2], title=f"Seasonality ({col})")
    decomposition.resid.plot(ax=axes[3], title=f"Residuals ({col})")

    plt.tight_layout()
    plt.show()

# ------------------------------------
# 3. Zoomed-In Seasonal-Trend Decomposition (Nov 10 - Nov 20)
# ------------------------------------

start_date, end_date = "2023-11-10", "2023-11-20"
data_zoomed = data.loc[start_date:end_date]

for col in ['visits_app', 'visits_web', 'visits_total']:
    print(f"\nPerforming Seasonal-Trend Decomposition for {col} (Zoomed In)...")
    decomposition = sm.tsa.seasonal_decompose(data_zoomed[col], model='additive', period=1440)

    fig, axes = plt.subplots(4, 1, figsize=(11, 7))
    decomposition.observed.plot(ax=axes[0], title=f"Observed ({col}) - Zoomed In")
    decomposition.trend.plot(ax=axes[1], title=f"Trend ({col}) - Zoomed In")
    decomposition.seasonal.plot(ax=axes[2], title=f"Seasonality ({col}) - Zoomed In")
    decomposition.resid.plot(ax=axes[3], title=f"Residuals ({col}) - Zoomed In")

    plt.tight_layout()
    plt.show()

# ------------------------------------
# 4. Plot Web & App Visits by Product Type (Only if 'product_type' Exists)
# ------------------------------------

if 'product_type' in data.columns:
    # Plot Web Visits by Product Type
    category_data_web = data.groupby(['datetime', 'product_type'])['visits_web'].sum().reset_index()
    pivoted_data_web = category_data_web.pivot(index='datetime', columns='product_type', values='visits_web').fillna(0)
    pivoted_data_web['Total_Visits'] = pivoted_data_web.sum(axis=1)

    plt.figure(figsize=(12, 6))
    for category in pivoted_data_web.columns[:-1]:
        plt.plot(pivoted_data_web.index, pivoted_data_web[category], label=category)
    plt.plot(pivoted_data_web.index, pivoted_data_web['Total_Visits'], label='Total_Visits', linewidth=2, linestyle='--', color='black')

    plt.xlabel('Datetime')
    plt.ylabel('Visits (Web)')
    plt.title('Website Visits by Product Type Over Time')
    plt.legend(loc='upper left', bbox_to_anchor=(1.05, 1))
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    # Plot App Visits by Product Type
    category_data_app = data.groupby(['datetime', 'product_type'])['visits_app'].sum().reset_index()
    pivoted_data_app = category_data_app.pivot(index='datetime', columns='product_type', values='visits_app').fillna(0)
    pivoted_data_app['Total_Visits'] = pivoted_data_app.sum(axis=1)

    plt.figure(figsize=(12, 6))
    for category in pivoted_data_app.columns[:-1]:
        plt.plot(pivoted_data_app.index, pivoted_data_app[category], label=category)
    plt.plot(pivoted_data_app.index, pivoted_data_app['Total_Visits'], label='Total_Visits', linewidth=2, linestyle='--', color='black')

    plt.xlabel('Datetime')
    plt.ylabel('Visits (App)')
    plt.title('App Visits by Product Type Over Time')
    plt.legend(loc='upper left', bbox_to_anchor=(1.05, 1))
    plt.grid(True)
    plt.tight_layout()
    plt.show()
else:
    print(" Warning: 'product_type' column not found in dataset. Skipping category plots.")
