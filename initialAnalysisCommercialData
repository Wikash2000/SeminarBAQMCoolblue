import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

"""
This script generates some relevant plots for the commercial data exxploration
"""
# ------------------------------------
# 1. Commercials per time slot
# ------------------------------------

broadcast_file = 'Web + broadcasting data - Broadcasting data.csv'
broadcast_data = pd.read_csv(broadcast_file, delimiter=';')

# Combine 'date' and 'time' into a single 'datetime' column
broadcast_data['datetime'] = pd.to_datetime(
    broadcast_data['date'] + ' ' + broadcast_data['time'],
    format='%m/%d/%Y %I:%M:%S %p'
)
broadcast_data['time'] = pd.to_datetime(broadcast_data['time'], format='%I:%M:%S %p')


# Extract "minutes of the day"
broadcast_data['minute_of_day'] = broadcast_data['datetime'].dt.hour * 60 + broadcast_data['datetime'].dt.minute

# Handle midnight crossing
broadcast_data['minute_of_day'] = broadcast_data['minute_of_day'].apply(lambda x: x + 1440 if x < 14 * 60 else x)

# Define time range (2:30 PM to 2:00 AM)
start_time, end_time = 14 * 60 + 30, 26 * 60
filtered_minutes = broadcast_data[(broadcast_data['minute_of_day'] >= start_time) &
                                  (broadcast_data['minute_of_day'] <= end_time)]['minute_of_day']

# Print total commercials
print("Total commercials in dataset:", len(broadcast_data))

# Plot: Distribution of Commercials by Time (per minute)
plt.figure(figsize=(12, 6))
plt.hist(filtered_minutes, bins=(end_time - start_time), range=(start_time, end_time), color='dimgray', edgecolor='black')

# X-axis labels per minute
ticks = range(start_time, end_time + 1, 60)
labels = [f"{(h-24 if h >= 24 else h)}:00" for h in range(14, 26)]
plt.xticks(ticks=ticks, labels=labels)

plt.xlabel('Time of Day')
plt.ylabel('Number of Commercials')
plt.title('Distribution of Commercials by Time (2:30 PM to 2:00 AM, per minute)')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# ------------------------------------
# 2. GRP histogram
# ------------------------------------
# Convert 'indexed_gross_rating_point' to numeric
df = broadcast_data
grp_column = "indexed_gross_rating_point"
df[grp_column] = pd.to_numeric(df[grp_column], errors='coerce')

# Count commercials with GRP = 0
num_zero_grp = (df[grp_column] == 0).sum()
print(f"Number of commercials with GRP = 0: {num_zero_grp}")

# Exclude commercials with GRP = 0
df_filtered = df[df[grp_column] > 0]

# Define bins: (0,1], (1,2], ..., up to max GRP value
max_grp = int(np.ceil(df_filtered[grp_column].max()))  # Round up to nearest integer
bins = np.arange(0, max_grp + 1.1, 1)  # Ensure bins are (0,1], (1,2], ...

# Create histogram for GRP
plt.figure(figsize=(10, 5))
plt.hist(df_filtered[grp_column], bins=bins, color='dimgray', edgecolor='black', alpha=0.7)

# Formatting the GRP histogram
plt.xlabel("Indexed GRP")
plt.ylabel("Count of Commercials")
plt.title("Distribution of Commercials by Indexed GRP (Excluding GRP = 0)")

# Set X-axis ticks only at intervals of 10
plt.xticks(np.arange(0, max_grp + 1, 10))

# Add vertical grid lines at every 10 GRP units
for x in np.arange(10, max_grp + 1, 10):
    plt.axvline(x, color='black', linestyle='--', alpha=0.3)

plt.grid(axis='y', linestyle='--', alpha=0.7)  # Keep horizontal grid lines

# Show the first plot
plt.show()


# ------------------------------------
# 3. Daily commercial histogram
# ------------------------------------
# Convert 'date' column to datetime format
df['date'] = pd.to_datetime(df['date'], format='%m/%d/%Y', errors='coerce')


# Print first few rows to verify correct parsing
print(df[['date']].head())

# Filter data for the range September 1 - December 31
start_date = "2023-09-01"
end_date = "2023-12-31"
df_filtered = df[(df['date'] >= start_date) & (df['date'] <= end_date)]

# Count number of commercials per day
commercials_per_day = df_filtered.groupby('date').size()

# Debugging: Print the counts to check if they exist
print(commercials_per_day)



# Create bar plot for daily commercials
plt.figure(figsize=(12, 5))
plt.bar(commercials_per_day.index, commercials_per_day.values, color='dimgray', edgecolor='black', alpha=0.7)

# Formatting the daily commercials plot
plt.xlabel("Date")
plt.ylabel("Number of Commercials")
plt.title("Daily Number of Commercials (Sepâ€“Dec 2023)")

# Fix X-axis formatting: Display months instead of every day
plt.xticks(pd.date_range(start=start_date, end=end_date, freq='MS'),
           labels=pd.date_range(start=start_date, end=end_date, freq='MS').strftime("%b"), rotation=0)

plt.grid(axis='y', linestyle='--', alpha=0.7)

# Show the second plot
plt.show()

#-------------------------------------------------------------------------------------------------------------------------------
# 4. Bar chart: Number of rows per unique channel
#-------------------------------------------------------------------------------------------------------------------------------
Commercial = df

channel_counts = Commercial['channel'].value_counts()
plt.figure(figsize=(12, 6))
channel_counts.plot(kind='bar', color='black', edgecolor='black')
plt.xlabel('Channel')
plt.ylabel('Number of commercials')
plt.title('Commercials per Channel over three months')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

#-------------------------------------------------------------------------------------------------------------------------------
# 5. Line chart: Average GRP per time slot
#-------------------------------------------------------------------------------------------------------------------------------
avg_grp_per_time = Commercial.groupby(Commercial['time'].dt.time)['indexed_gross_rating_point'].mean().reset_index()
avg_grp_per_time['time_str'] = avg_grp_per_time['time'].astype(str)

plt.figure(figsize=(12, 6))
plt.plot(avg_grp_per_time['time_str'], avg_grp_per_time['indexed_gross_rating_point'], color='black', linewidth=2, label='Average GRP')
step = max(1, len(avg_grp_per_time) // 10)  # Ensure at least one label
plt.xticks(ticks=np.arange(0, len(avg_grp_per_time), step=step), labels=avg_grp_per_time['time_str'][::step], rotation=45)
plt.xlabel('Time Slot')
plt.ylabel('Average GRP')
plt.title('Average GRP per Time Slot')
plt.grid(True)
plt.tight_layout()
plt.legend()
plt.show()

#-------------------------------------------------------------------------------------------------------------------------------
# 6. Average GRP per channel
#-------------------------------------------------------------------------------------------------------------------------------
avg_grp_per_channel = Commercial.groupby(Commercial['channel'])['indexed_gross_rating_point'].mean().reset_index()

plt.figure(figsize=(12, 6))

plt.bar(
    avg_grp_per_channel['channel'],  # Use channel names as x-axis labels
    avg_grp_per_channel['indexed_gross_rating_point'], 
    color='black', edgecolor='black', label='Average GRP'
)

plt.xlabel('Channel')
plt.ylabel('Average GRP')
plt.title('Average GRP per Channel')
plt.xticks(rotation=60)  # Rotate x-axis labels for better readability
plt.tight_layout()
plt.legend()
plt.grid(axis='y', linestyle='--', alpha=0.7)  # Optional: Add a grid for clarity
plt.show()


